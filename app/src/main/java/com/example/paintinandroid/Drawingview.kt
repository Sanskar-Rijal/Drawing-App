package com.example.paintinandroid
import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.Path
import android.util.AttributeSet
import android.util.TypedValue
import android.view.MotionEvent
import android.view.View


class Drawingview(cont:Context, att:AttributeSet) :View(cont,att)
//passing cont and att from constructor of class drawing view
{
    //creating various properties before making the app
    /*
    initialization
     */
    private var drawpath:CustomPath?= null
    private var mCanvasBitmap: Bitmap?=null
    private  var Drawpaint:Paint?=null
    private var mCanvasPaint:Paint? =null
    private var brushsize:Float= 10.toFloat()
    private var color=Color.BLACK
    private var canvas:Canvas?=null
    private var storepath =ArrayList<CustomPath>()
    init {
        setupDrawing() //used to setup default values
    }
    private fun setupDrawing()
    {
        Drawpaint= Paint()
        drawpath= CustomPath(color,brushsize)
       // if(Drawpaint != null) {
            Drawpaint!!.color = color
            Drawpaint!!.style=Paint.Style.STROKE
            Drawpaint!!.strokeCap=Paint.Cap.ROUND
       // }
        mCanvasPaint=Paint(Paint.DITHER_FLAG)
      //  brushsize=20.toFloat() we dont need this now already done in main activity
    }

    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
        super.onSizeChanged(w, h, oldw, oldh)
        mCanvasBitmap=Bitmap.createBitmap(w,h, Bitmap.Config.ARGB_8888)
        canvas= Canvas(mCanvasBitmap!!)
    }

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)
        canvas.drawBitmap(mCanvasBitmap!!,0f,0f,mCanvasPaint)
        for (path in storepath)
        {
            Drawpaint!!.strokeWidth=path.brushthichkness//adjusting the properties
            Drawpaint!!.color=path.color
            canvas.drawPath(path,Drawpaint!!)//it is used to draw path on canvas
        }
        if(!drawpath!!.isEmpty) {//this checks if user is currently drawing or not and
            //adjusting the properties of paint
            Drawpaint!!.strokeWidth=drawpath!!.brushthichkness
            Drawpaint!!.color=drawpath!!.color
            canvas.drawPath(drawpath!!, Drawpaint!!)
        }
    }

    override fun onTouchEvent(event: MotionEvent?): Boolean {
        val touchx=event?.x
        val touchy=event?.y
        when (event?.action)
        {
            MotionEvent.ACTION_DOWN ->//this comes into play when user has pressed down on the view
            {//finger pressed on the screen
                drawpath!!.color=color
                drawpath!!.brushthichkness=brushsize
                drawpath!!.reset()

                if (touchx != null) {
                    if (touchy != null) {
                        drawpath!!.moveTo(touchx,touchy)
                    }
                }

            }
            MotionEvent.ACTION_MOVE ->//this comes in hand when user is moving their fingers on the view
            {//finger moved

                if (touchx != null) {
                    if (touchy != null) {
                        drawpath!!.lineTo(touchx , touchy)
                    }
                }
            }
            MotionEvent.ACTION_UP -> //user has released there finger
            {//finger is released to store it
                storepath.add(drawpath!!)//now we store the path generated by user so that it don't vanish
                drawpath =CustomPath(color,brushsize)
            }
            else ->return false
        }
        invalidate()
        return true
    }
    fun brushsize(newsize:Float)
    {
        brushsize=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
            newsize,resources.displayMetrics)
        Drawpaint!!.strokeWidth=brushsize
    }
    internal inner class CustomPath(var color:Int
    ,var brushthichkness:Float) :Path()
    {

    }
}